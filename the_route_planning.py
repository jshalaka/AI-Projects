# -*- coding: utf-8 -*-
"""The Route Planning

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TqtGbSBrsiaULc0m3PSYv5Qv-b79SRBW

The Route Planning
"""

!pip install simpleai
from simpleai.search import SearchProblem, astar, greedy, breadth_first, depth_first, uniform_cost
import math

COSTS = [
    [0, 7, 9, 'inf', 'inf', 14],
    [7, 0, 10, 15, 'inf', 'inf'],
    [9, 10, 0, 11, 'inf', 2],
    ['inf', 15, 11, 0, 6, 'inf'],
    ['inf', 'inf', 'inf', 6, 0, 9],
    [14, 'inf', 2, 'inf', 9, 0]
]

class Route(SearchProblem):

    # initialise with the initial and goal states. Do "-1" because the nodes start from 1.
    def __init__(self, initial, goal):
        self.initial = initial-1
        self.goal = goal-1
        super(Route, self).__init__(initial_state=self.initial)

    # add all connected nodes, i.e. those with a cost of not 0 or inf
    def actions(self, state):
        actions = []
        for action in range(len(COSTS[state])):
            if COSTS[state][action] not in ['inf', 0]:
                actions.append(action)
        return actions

    # the result state is just the action as defined
    def result(self, state, action):
        return action

    # check if goal is reached
    def is_goal(self, state):
        return state == self.goal

    # return the cost between two states
    def cost(self, state, action, state2):
        return COSTS[state][action]

problem = Route(1, 5)
# result = breadth_first(problem, graph_search=True)
# result = depth_first(problem, graph_search=True)
result = uniform_cost(problem)

# Print the results
path = [x[1]+1 for x in result.path()]
print("The route is %s, and total cost is %s" %(path, result.cost))

problem = Route(1, 5)
# result = breadth_first(problem, graph_search=True)
result = depth_first(problem, graph_search=True)
# result = uniform_cost(problem)

# Print the results
path = [x[1]+1 for x in result.path()]
print("The route is %s, and total cost is %s" %(path, result.cost))

problem = Route(1, 5)
result = breadth_first(problem, graph_search=True)
# result = depth_first(problem, graph_search=True)
# result = uniform_cost(problem)

# Print the results
path = [x[1]+1 for x in result.path()]
print("The route is %s, and total cost is %s" %(path, result.cost))